apply plugin: 'com.android.library'
apply from: 'version.gradle'
//apply from: 'code_coverage.gradle'

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 3
        versionName '1.4.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        disable 'AppLinksAutoVerifyError'
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /* testing */
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'junit:junit:4.13.1'
    testImplementation 'org.robolectric:robolectric:4.2.1'
    testImplementation 'org.robolectric:shadows-play-services:3.3.2'
    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.0'
    /* Rx */
    implementation 'io.reactivex:rxjava:1.3.3'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    /* Network */
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    /*FCM*/
    //noinspection GradleCompatible warning disabled (seems to be caused by internal firebase-messaging dependencies versioning)
//    implementation 'com.google.firebase:firebase-messaging:22.0.0'
//    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation platform('com.google.firebase:firebase-bom:28.4.0')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.android.gms:play-services-base:17.6.0'

    /*Sockets*/
    implementation 'com.neovisionaries:nv-websocket-client:2.3'
}

/*

    Generate Maven release files
    ./gradlew clean build generateRelease

*/

//apply plugin: 'signing'
//apply plugin: 'maven'
//
//def groupId = 'com.comapi'
//def artifactId = 'foundation'
//def version = foundationVersion
//def comapiUrl = 'http://www.comapi.com/'
//def localReleaseDest = "${buildDir}/release/${version}"
//
//task androidJavadocs(type: Javadoc, overwrite: true) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    options.links("http://docs.oracle.com/javase/7/docs/api/")
//    options.linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
//    exclude '**/BuildConfig.java'
//    exclude '**/R.java'
//    failOnError = false
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}
//
//task androidSourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}
//
//uploadArchives {
//
//    repositories.mavenDeployer {
//
//        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//        pom.groupId = groupId
//        pom.artifactId = artifactId
//        pom.version = version
//        pom.project {
//
//            packaging 'aar'
//
//            licenses {
//                license {
//                    name 'MIT License'
//                    url 'http://www.opensource.org/licenses/mit-license.php'
//                    distribution 'repo'
//                }
//            }
//            name 'Comapi'
//            description 'Provides the basics of any Comapi integration into your apps. The Comapi Foundation SDK is responsible for handling: registration, control of User and Device registration details, sending and receiving content & data.'
//            url comapiUrl
//
//            developers {
//                developer {
//                    id 'marcinswierczek'
//                    name 'Marcin Swierczek';
//                    email 'sdk@comapi.com';
//                }
//            }
//
//            scm {
//                url 'https://github.com/comapi/comapi-sdk-android'
//                connection 'scm:git:https://github.com/comapi/comapi-sdk-android.git'
//                developerConnection 'scm:git:https://github.com/comapi/comapi-sdk-android.git'
//            }
//        }
//
//        // Add other pom properties here if you want (developer details / licenses)
//        repository(url: "file://${localReleaseDest}")
//    }
//}
//
///**
// * To avoid conflict with Jcentre autogenerated files
// */
//task removeMavenMetatdata(type: Delete) {
//    delete fileTree(dir: "${localReleaseDest}/com/comapi/foundation", exclude: "${version}")
//}
//
//task zipRelease(type: Zip) {
//    from "${localReleaseDest}"
//    destinationDir buildDir
//    archiveName "${artifactId}-${version}.zip"
//}
//
//task generateRelease << {
//    println "Release ${version} can be found at ${localReleaseDest}/"
//    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
//}
//
//signing {
//    required { isReleaseVersion || hasProperty("teamcity") }
//    sign configurations.archives
//}
//
//if (hasProperty("teamcity")) {
//    gradle.taskGraph.whenReady { taskGraph ->
//        if (taskGraph.allTasks.any { it instanceof Sign }) {
//
//            def id = System.getenv("keyid")
//            def file = System.getenv("secretkeyringfile")
//            def password = System.getenv("donkypassword")
//
//            allprojects { ext."signing.keyId" = id }
//            allprojects { ext."signing.secretKeyRingFile" = file }
//            allprojects { ext."signing.password" = password }
//
//        }
//    }
//}
//
//generateRelease.dependsOn(uploadArchives)
//zipRelease.dependsOn(removeMavenMetatdata)
//generateRelease.dependsOn(zipRelease)
//
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}
